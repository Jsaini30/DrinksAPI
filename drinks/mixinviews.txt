from rest_framework import mixins
from rest_framework import generics
# get all the drinks
# serialize them
# return json



class DrinksAPI(mixins.ListModelMixin,
                  mixins.CreateModelMixin,
                  generics.GenericAPIView):
    queryset = Drink.objects.all()
    serializer_class = DrinkSerializer

    def get(self, request, *args, **kwargs):
        return self.list(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):
        return self.create(request, *args, **kwargs)




class DrinkListAPI(mixins.RetrieveModelMixin,
                    mixins.UpdateModelMixin,
                    mixins.DestroyModelMixin,
                    generics.GenericAPIView):
    queryset = Drink.objects.all()
    serializer_class = DrinkSerializer

    def get(self, request,format= None, *args, **kwargs):
        return self.retrieve(request, *args, **kwargs)

    def put(self, request,format= None, *args, **kwargs):
        return self.update(request, *args, **kwargs)

    def delete(self, request, format= None,*args, **kwargs):
        return self.destroy(request, *args, **kwargs)











DIFFERENT FILE













#from urllib import response
from django.shortcuts import render
import coreapi
import drinks
#from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
#from rest_framework.permissions import IsAuthenticated
from rest_framework.views import APIView
from drinks import serializer
from django.http import JsonResponse
from rest_framework.schemas import AutoSchema

from .models import Drink
from .serializer import DrinkSerializer




class DrinksViewSchema(AutoSchema):

    def get_manual_fields(self, path, method):
        extra_fields = []
        
        if method.lower() in ['post', 'put']:
            extra_fields = [
                coreapi.Field('desc')
            ]
        manual_fields = super().get_manual_fields(path, method)
        return manual_fields + extra_fields


class DrinksAPI(APIView):

   # schema = DrinksViewSchema
   # serializer_class = DrinkSerializer
    #permission_classes = [IsAuthenticated]

    def get(self, request,):
        drinks = Drink.objects.all()
        serializer = DrinkSerializer(drinks, many=True)
        return Response(serializer.data)

    def post(self, request):
        serializer = DrinkSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
